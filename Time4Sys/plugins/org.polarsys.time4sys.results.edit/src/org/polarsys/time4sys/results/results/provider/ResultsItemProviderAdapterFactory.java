/**
 */
package org.polarsys.time4sys.results.results.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.polarsys.time4sys.results.results.util.ResultsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ResultsItemProviderAdapterFactory extends ResultsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResultsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.ResultSetContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultSetContainerItemProvider resultSetContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.ResultSetContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultSetContainerAdapter() {
		if (resultSetContainerItemProvider == null) {
			resultSetContainerItemProvider = new ResultSetContainerItemProvider(this);
		}

		return resultSetContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.AnalysisResultSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalysisResultSetItemProvider analysisResultSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.AnalysisResultSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalysisResultSetAdapter() {
		if (analysisResultSetItemProvider == null) {
			analysisResultSetItemProvider = new AnalysisResultSetItemProvider(this);
		}

		return analysisResultSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.TaskChainResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskChainResultItemProvider taskChainResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.TaskChainResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskChainResultAdapter() {
		if (taskChainResultItemProvider == null) {
			taskChainResultItemProvider = new TaskChainResultItemProvider(this);
		}

		return taskChainResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.SimulationResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimulationResultItemProvider simulationResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.SimulationResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimulationResultAdapter() {
		if (simulationResultItemProvider == null) {
			simulationResultItemProvider = new SimulationResultItemProvider(this);
		}

		return simulationResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.ContainedResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainedResultItemProvider containedResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.ContainedResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainedResultAdapter() {
		if (containedResultItemProvider == null) {
			containedResultItemProvider = new ContainedResultItemProvider(this);
		}

		return containedResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.ReferencedResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferencedResultItemProvider referencedResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.ReferencedResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferencedResultAdapter() {
		if (referencedResultItemProvider == null) {
			referencedResultItemProvider = new ReferencedResultItemProvider(this);
		}

		return referencedResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.TaskResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskResultItemProvider taskResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.TaskResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskResultAdapter() {
		if (taskResultItemProvider == null) {
			taskResultItemProvider = new TaskResultItemProvider(this);
		}

		return taskResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.SimplePeriodicEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimplePeriodicEventItemProvider simplePeriodicEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.SimplePeriodicEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimplePeriodicEventAdapter() {
		if (simplePeriodicEventItemProvider == null) {
			simplePeriodicEventItemProvider = new SimplePeriodicEventItemProvider(this);
		}

		return simplePeriodicEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.SimpleSporadicEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleSporadicEventItemProvider simpleSporadicEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.SimpleSporadicEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleSporadicEventAdapter() {
		if (simpleSporadicEventItemProvider == null) {
			simpleSporadicEventItemProvider = new SimpleSporadicEventItemProvider(this);
		}

		return simpleSporadicEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.OnceEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnceEventItemProvider onceEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.OnceEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnceEventAdapter() {
		if (onceEventItemProvider == null) {
			onceEventItemProvider = new OnceEventItemProvider(this);
		}

		return onceEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.SlidingWindowEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlidingWindowEventItemProvider slidingWindowEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.SlidingWindowEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlidingWindowEventAdapter() {
		if (slidingWindowEventItemProvider == null) {
			slidingWindowEventItemProvider = new SlidingWindowEventItemProvider(this);
		}

		return slidingWindowEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.TindellEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TindellEventItemProvider tindellEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.TindellEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTindellEventAdapter() {
		if (tindellEventItemProvider == null) {
			tindellEventItemProvider = new TindellEventItemProvider(this);
		}

		return tindellEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.Offset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OffsetItemProvider offsetItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.Offset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOffsetAdapter() {
		if (offsetItemProvider == null) {
			offsetItemProvider = new OffsetItemProvider(this);
		}

		return offsetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.CustomTaskResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomTaskResultItemProvider customTaskResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.CustomTaskResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomTaskResultAdapter() {
		if (customTaskResultItemProvider == null) {
			customTaskResultItemProvider = new CustomTaskResultItemProvider(this);
		}

		return customTaskResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.ComputingResourceResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingResourceResultItemProvider computingResourceResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.ComputingResourceResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputingResourceResultAdapter() {
		if (computingResourceResultItemProvider == null) {
			computingResourceResultItemProvider = new ComputingResourceResultItemProvider(this);
		}

		return computingResourceResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.SharedResourceResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedResourceResultItemProvider sharedResourceResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.SharedResourceResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedResourceResultAdapter() {
		if (sharedResourceResultItemProvider == null) {
			sharedResourceResultItemProvider = new SharedResourceResultItemProvider(this);
		}

		return sharedResourceResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.time4sys.results.results.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.time4sys.results.results.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (resultSetContainerItemProvider != null) resultSetContainerItemProvider.dispose();
		if (analysisResultSetItemProvider != null) analysisResultSetItemProvider.dispose();
		if (taskChainResultItemProvider != null) taskChainResultItemProvider.dispose();
		if (simulationResultItemProvider != null) simulationResultItemProvider.dispose();
		if (containedResultItemProvider != null) containedResultItemProvider.dispose();
		if (referencedResultItemProvider != null) referencedResultItemProvider.dispose();
		if (taskResultItemProvider != null) taskResultItemProvider.dispose();
		if (simplePeriodicEventItemProvider != null) simplePeriodicEventItemProvider.dispose();
		if (simpleSporadicEventItemProvider != null) simpleSporadicEventItemProvider.dispose();
		if (onceEventItemProvider != null) onceEventItemProvider.dispose();
		if (slidingWindowEventItemProvider != null) slidingWindowEventItemProvider.dispose();
		if (tindellEventItemProvider != null) tindellEventItemProvider.dispose();
		if (offsetItemProvider != null) offsetItemProvider.dispose();
		if (customTaskResultItemProvider != null) customTaskResultItemProvider.dispose();
		if (computingResourceResultItemProvider != null) computingResourceResultItemProvider.dispose();
		if (sharedResourceResultItemProvider != null) sharedResourceResultItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
	}

}
